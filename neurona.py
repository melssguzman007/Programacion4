# import google.generativeai as genai
  

# genai.configure(api_key="")
# model = genai.GenerativeModel("gemini-2.0-flash").start_chat()


# print("Habla conmigo! (escribe 'salir' para terminar)")

# while True:
#     user_input = input("T√∫: ")
#     if user_input.lower() == "salir":
#         print("¬°Adi√≥s!")
#         break
#     response = chat.send_message(user_input)
#     print("Gemini dice: ", response.text)
    
    
    
    
# import google.generativeai as genai

# # Configura tu API key
# genai.configure(api_key="")

# # Crear modelo
# model = genai.GenerativeModel("gemini-1.5-flash")

# # Crear la sesi√≥n de chat
# chat = model.start_chat()

# print("Habla conmigo! (escribe 'salir' para terminar)")

# while True:
#     user_input = input("T√∫: ")
#     if user_input.lower() == "salir":
#         print("Adi√≥s! üëã")
#         break
    
#     response = chat.send_message(user_input)
#     print("Bot:", response.text)



# import os
# import subprocess
# import google.generativeai as genai

# # Configuraci√≥n de Gemini
# genai.configure(api_key="")

# def generar_codigo(prompt, filename="script_generado.py"):
#     """Genera c√≥digo con Gemini y lo guarda en un archivo .py"""
#     model = genai.GenerativeModel("gemini-1.5-flash")
#     response = model.generate_content(f"Escribe un script en Python que haga lo siguiente:\n{prompt}")

#     codigo = response.text
#     with open(filename, "w", encoding="utf-8") as f:
#         f.write(codigo)

#     print(f"\n‚úÖ C√≥digo generado en {filename}\n")
#     return filename

# def ejecutar_script(filename):
#     """Ejecuta un script en Python"""
#     print(f"\n‚ñ∂ Ejecutando {filename}...\n")
#     subprocess.run(["python", filename])

# def menu():
#     while True:
#         print("\n===== MEN√ö =====")
#         print("1. Generar nuevo script con IA")
#         print("2. Ejecutar √∫ltimo script")
#         print("3. Modificar script con IA")
#         print("4. Salir")
        
#         opcion = input("Elige una opci√≥n: ")

#         if opcion == "1":
#             prompt = input("¬øQu√© quer√©s que haga el nuevo script?: ")
#             global ultimo_archivo
#             ultimo_archivo = generar_codigo(prompt)
        
#         elif opcion == "2":
#             if 'ultimo_archivo' in globals():
#                 ejecutar_script(ultimo_archivo)
#             else:
#                 print("‚ö† No hay script generado a√∫n.")
        
#         elif opcion == "3":
#             if 'ultimo_archivo' in globals():
#                 prompt = input("¬øQu√© quer√©s agregar o cambiar en el script?: ")
#                 generar_codigo(prompt, ultimo_archivo)  # reescribe el archivo existente
#                 print("‚úÖ Script modificado.")
#             else:
#                 print("‚ö† No hay script para modificar.")
        
#         elif opcion == "4":
#             print("üëã Saliendo...")
#             break
#         else:
#             print("Opci√≥n inv√°lida.")

# if __name__ == "__main__":
#     menu()

import os
import google.generativeai as genai

# Configura tu API key de Google AI Studio
genai.configure(api_key="")

SCRIPT_NAME = "script_generado.py"
 #Arreglas esto que no borra las 2 primeras lineas y la ultima==============================0000
def limpiar_script():
    """Elimina l√≠neas problem√°ticas del script."""
    if not os.path.exists(SCRIPT_NAME):
        print("No existe el script todav√≠a.")
        return

    with open(SCRIPT_NAME, "r", encoding="utf-8") as f:
        lineas = f.readlines()

    # Filtramos l√≠neas que contengan palabras clave de error
    lineas_limpias = [linea for linea in lineas if "COMO HAGO" not in linea]

    with open(SCRIPT_NAME, "w", encoding="utf-8") as f:
        f.writelines(lineas_limpias)

    print("Script limpiado!")
# ===============================================================================================
def correr_script():
    """Ejecuta el script generado."""
    if not os.path.exists(SCRIPT_NAME):
        print("No existe el script para ejecutar.")
        return
    os.system(f"python {SCRIPT_NAME}")

def generar_codigo(prompt):
    """Usa Gemini para generar o modificar c√≥digo Python."""
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    codigo = response.text

    with open(SCRIPT_NAME, "w", encoding="utf-8") as f:
        f.write(codigo)

    print("C√≥digo generado y guardado en", SCRIPT_NAME)

def modificar_codigo(prompt):
    """Usa Gemini para modificar el c√≥digo existente seg√∫n prompt."""
    if not os.path.exists(SCRIPT_NAME):
        print("No existe el script para modificar.")
        return

    with open(SCRIPT_NAME, "r", encoding="utf-8") as f:
        codigo_actual = f.read()

    model = genai.GenerativeModel("gemini-1.5-flash")
    full_prompt = f"Modifica el siguiente c√≥digo seg√∫n estas instrucciones: {prompt}\n\nC√≥digo actual:\n{codigo_actual}"
    response = model.generate_content(full_prompt)
    codigo_modificado = response.text

    with open(SCRIPT_NAME, "w", encoding="utf-8") as f:
        f.write(codigo_modificado)

    print("C√≥digo modificado y guardado en", SCRIPT_NAME)

if __name__ == "__main__":
    while True:
        opcion = input("\nMen√∫:\n1) Generar nuevo script\n2) Modificar script existente\n3) Limpiar script\n4) Ejecutar script\n5) Salir\nElige: ")
        
        if opcion == "1":
            prompt = input("Describe qu√© quieres que haga el script: ")
            generar_codigo("Haceme en python lo que dice a continuacion " + prompt + " y asegurate que el codigo no tenga ningun texto solo listo para ejecutar")
        elif opcion == "2":
            prompt = input("Describe los cambios que quieres aplicar al script: ")
            modificar_codigo(prompt)
        elif opcion == "3":
            limpiar_script()
        elif opcion == "4":
            correr_script()
        elif opcion == "5":
            print("¬°Adi√≥s!")
            break
        else:
            print("Opci√≥n inv√°lida.")
